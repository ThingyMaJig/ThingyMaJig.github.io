sync on
sync rate 0
color backdrop rgb(0,0,0)

if file exist("settings.ini")
   open to read 1, "settings.ini"
   read string 1, tmp$ : MapData$ = tmp$
   read string 1, tmp$ : MapTemplate$ = tmp$
   read string 1, tmp$ : IMAGE_WIDTH# = val(tmp$)
   read string 1, tmp$ : IMAGE_HEIGHT# = val(tmp$)
   read string 1, tmp$ : GRID_X# = val(tmp$)
   read string 1, tmp$ : GRID_Y# = val(tmp$)
   close file 1
else
   GRID_X# = 32.0
   GRID_Y# = 32.0
   IMAGE_WIDTH# = 256.0
   IMAGE_HEIGHT# = 256.0
endif




TileCountX = IMAGE_WIDTH# / GRID_X#
TileCountY = IMAGE_HEIGHT# / GRID_Y#

load image MapTemplate$, 1

dim UV_COORDS#(TileCountX * TileCountY, 4, 2)

TileFractionX# = GRID_X# / IMAGE_WIDTH#
TileFractionY# = GRID_Y# / IMAGE_HEIGHT#


for x = 0 to TileCountX-1
   for y = 0 to TileCountY-1
      UV_COORDS#(x + (y*TileCountX), 0, 0) =  x    * GRID_X# / IMAGE_WIDTH#
      UV_COORDS#(x + (y*TileCountX), 0, 1) =  y    * GRID_Y# / IMAGE_HEIGHT#

      UV_COORDS#(x + (y*TileCountX), 1, 0) = (x+1) * GRID_X# / IMAGE_WIDTH#
      UV_COORDS#(x + (y*TileCountX), 1, 1) =  y    * GRID_Y# / IMAGE_HEIGHT#

      UV_COORDS#(x + (y*TileCountX), 2, 0) = (x+1) * GRID_X# / IMAGE_WIDTH#
      UV_COORDS#(x + (y*TileCountX), 2, 1) = (y+1) * GRID_Y# / IMAGE_HEIGHT#

      UV_COORDS#(x + (y*TileCountX), 3, 0) =  x    * GRID_X# / IMAGE_WIDTH#
      UV_COORDS#(x + (y*TileCountX), 3, 1) = (y+1) * GRID_Y# / IMAGE_HEIGHT#
   next y
next x

open to read 1, MapData$
read string 1, tmp$ : Polys = val(tmp$)
read string 1, tmp$ : MapTileWidth = val(tmp$)
read string 1, tmp$ : MapTileDepth = val(tmp$)

make memblock 1, 12 + (32 * 6 * Polys)
write memblock dword 1,0,274
write memblock dword 1,4,32
write memblock dword 1,8,Polys * 6

Poly = 0
charCol = 0
x# = 0
y# = 0
done = 0


while tmp$ <> "-3"
   charCol = 0
   tile = -1
   read string 1, tmp$
   while tile > -2 AND tmp$ <> ""
      tmpVal$ = ""

      while mid$(tmp$, charCol) <> "," AND charCol < len(tmp$)+1
         tmpVal$ = tmpVal$ + mid$(tmp$, charCol)
         inc charCol
      endwhile

      inc charCol
      tile = val(tmpVal$)
      inc x#, 1.0

      if tile > -1
         MeshEntry(1, 12 + (poly * 192)      ,  x#      * MapTileWidth, 0.0,  y#      * MapTileDepth, 0.0, 1.0, 0.0, UV_COORDS#(tile, 0, 0), UV_COORDS#(tile, 0, 1))
         MeshEntry(1, 12 + (poly * 192) + 32 ,  x#      * MapTileWidth, 0.0, (y#+1.0) * MapTileDepth, 0.0, 1.0, 0.0, UV_COORDS#(tile, 3, 0), UV_COORDS#(tile, 3, 1))
         MeshEntry(1, 12 + (poly * 192) + 64 , (x#+1.0) * MapTileWidth, 0.0,  y#      * MapTileDepth, 0.0, 1.0, 0.0, UV_COORDS#(tile, 1, 0), UV_COORDS#(tile, 1, 1))

         MeshEntry(1, 12 + (poly * 192) + 96 , (x#+1.0) * MapTileWidth, 0.0,  y#      * MapTileDepth, 0.0, 1.0, 0.0, UV_COORDS#(tile, 1, 0), UV_COORDS#(tile, 1, 1))
         MeshEntry(1, 12 + (poly * 192) + 128,  x#      * MapTileWidth, 0.0, (y#+1.0) * MapTileDepth, 0.0, 1.0, 0.0, UV_COORDS#(tile, 3, 0), UV_COORDS#(tile, 3, 1))
         MeshEntry(1, 12 + (poly * 192) + 160, (x#+1.0) * MapTileWidth, 0.0, (y#+1.0) * MapTileDepth, 0.0, 1.0, 0.0, UV_COORDS#(tile, 2, 0), UV_COORDS#(tile, 2, 1))
      endif

      if tile >-1 then inc poly
   endwhile
   inc y#, 1.0
   x# = 0
endwhile
close file 1
close file 2


make mesh from memblock 1, 1
make object 1, 1, 1
position object 1, object size x(1) * -0.5, 0, object size z(1) * -0.5
set object transparency 1, 3







CamDist# = object size x(1)
if object size z(1) > CamDist# then CamDist# = object size z(1)
#constant CAMHANGLE 30
CamHeight# = sin(CAMHANGLE) * CamDist#
autocam off


make object plain 2, (CamDist# + 10.0) * 1.333333, CamDist# + 10.0
load image "london.jpg", 2
texture object 2, 2
position object 2, 0, -2, 0
point object 2, 0, 0, 0







frameTime# = 1.0
startTime = timer()
CamAngle# = 0.0

do
   frameTime# = (frameTime# * 0.8) + ((timer() - startTime) * 0.2)
   startTime = timer()

   inc CamAngle#, frameTime# * 0.045
   x# = sin(CamAngle#) * CamDist#
   z# = cos(CamAngle#) * CamDist#

   position camera x#, CamHeight#, z#
   point camera 0.0, 0.0, 0.0

   set point light 0, x#, CamHeight#, z#

   sync
loop




function MeshEntry(mb, n, x#, y#, z#, nx#, ny#, nz#, u#, v#)
   write memblock float mb, n +  0, x#
   write memblock float mb, n +  4, y#
   write memblock float mb, n +  8, z#
   write memblock float mb, n + 12, nx#
   write memblock float mb, n + 16, ny#
   write memblock float mb, n + 20, nz#
   write memblock float mb, n + 24, u#
   write memblock float mb, n + 28, v#
endfunction
